name: Build UVC-Boson APK with Native Libraries

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  NDK_VERSION: '21.4.7075529'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 19
        target: android-19
        arch: x86_64

    - name: Install older NDK with API 19 support
      run: |
        # Use NDK r21e which still supports android-19
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;21.4.7075529"

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Download Gradle wrapper if missing
      run: |
        if [ ! -f gradle/wrapper/gradle-wrapper.jar ]; then
          curl -L https://github.com/gradle/gradle/raw/v7.6.0/gradle/wrapper/gradle-wrapper.jar -o gradle/wrapper/gradle-wrapper.jar
        fi

    - name: Set up NDK environment and clean Termux configs
      run: |
        # Use CI-specific gradle properties instead of Termux ones
        cp gradle-ci.properties gradle.properties

        # Create clean local.properties for CI
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        echo "ndk.dir=$ANDROID_HOME/ndk/${{ env.NDK_VERSION }}" >> local.properties

        # Set environment variables
        echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        echo "NDK_ROOT=$ANDROID_HOME/ndk/${{ env.NDK_VERSION }}" >> $GITHUB_ENV

    - name: Verify NDK build will be enabled
      run: |
        # NDK build is now conditionally enabled based on CI environment
        echo "CI environment detected, NDK build will be automatically enabled"
        echo "Architecture: $(uname -m)"
        echo "CI variable: $CI"

    - name: Configure Android NDK for cross-compilation
      run: |
        # Ensure NDK toolchain is properly configured for ARM targets
        export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
        echo "NDK toolchain configured for cross-compilation to ARM targets"

    - name: Build native libraries
      run: |
        # Build NDK libraries first
        cd libuvccamera/src/main/jni
        $ANDROID_NDK_HOME/ndk-build clean
        $ANDROID_NDK_HOME/ndk-build APP_ABI="armeabi-v7a" APP_PLATFORM=android-19
        cd ../../../..

    - name: Clear Gradle cache and verify library versions
      run: |
        # Clear any cached dependencies that might have wrong versions
        rm -rf ~/.gradle/caches/

        # Check what version is configured
        echo "Gradle file common library version:"
        grep "common:" libuvccamera/build.gradle || echo "No common library found in gradle file"

        echo "✅ Cleared Gradle cache and verified common library version"

    - name: Check dependency tree
      run: |
        ./gradlew :usbCameraTest3:dependencies | grep -A5 -B5 "common" || echo "No common dependencies found"

    - name: Build debug APK with force version
      run: |
        # Force the correct version by adding resolution strategy
        cat >> libuvccamera/build.gradle << 'EOF'

configurations.all {
    resolutionStrategy {
        force 'com.serenegiant:common:1.2.0'
    }
}
EOF
        ./gradlew :usbCameraTest3:assembleDebug --stacktrace

    - name: Verify native libraries in APK
      run: |
        # Check that native libraries are included
        unzip -l usbCameraTest3/build/outputs/apk/debug/usbCameraTest3-debug.apk | grep -E "\.so$" || echo "❌ No native libraries found in APK"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: uvc-boson-glass-apk
        path: usbCameraTest3/build/outputs/apk/debug/usbCameraTest3-debug.apk
        retention-days: 30

    - name: Upload native libraries artifact
      uses: actions/upload-artifact@v4
      with:
        name: native-libraries
        path: |
          libuvccamera/src/main/libs/**/*.so
          libuvccamera/build/intermediates/library_jni/debug/**/*.so
        retention-days: 30
        if-no-files-found: warn